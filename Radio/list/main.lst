C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\list\main.lst) OBJECT(.\list
                    -\main.obj)

line level    source

   1          #include <stdio.h>
   2          #include <string.h>
   3          #include        "config.h"
   4          #include  <math.h>    //Keil library
   5          #include        "binary.h"
   6          #include        "USART1.h"
   7          #include        "src\delay.h"
   8          #include        "src\OLED.h"
   9          #include        "src\BMP_BACKGROUND.h"
  10          
  11          
  12          //#include "stdlib.h"
  13          
  14          #define COM_TX1_Lenth   20
  15          #define COM_RX1_Lenth   20
  16          
  17          COMx_Define     COM1;
  18          u8      idata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
  19          u8      xdata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
  20          
  21          
  22          
  23          
  24          sbit LED=P2^5;
  25          
  26          u8 BUTTON1 = 0;
  27          u8 BUTTON2 = 0;
  28          u8 BUTTON3 = 0;
  29          
  30          // button & status machine
  31          u8 BUTTON1_DELAY= 1;
  32          u8 BUTTON2_DELAY= 1;
  33          u8 BUTTON3_DELAY= 1;
  34          bit BUTTON1_TRIG = 0;
  35          bit BUTTON2_TRIG = 0;
  36          bit BUTTON3_TRIG = 0;
  37          
  38          u8 timer3_cnt=0;
  39          u8 led_cnt=0;
  40          u16 ADC_RESULT = 0;
  41          u16 BUTTON_ADC_RESULT = 0;
  42          
  43          
  44          /*************  本地函数声明    **************/
  45          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  46          {
  47   1              u16     i;
  48   1              u32     j;
  49   1              
  50   1              if(UARTx == USART1)
  51   1              {
  52   2                      COM1.id = 1;
  53   2                      COM1.TX_read    = 0;
  54   2                      COM1.TX_write   = 0;
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 2   

  55   2                      COM1.B_TX_busy  = 0;
  56   2                      COM1.RX_Cnt     = 0;
  57   2                      COM1.RX_TimeOut = 0;
  58   2                      COM1.B_RX_OK    = 0;
  59   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  60   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  61   2      
  62   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 1;       //模式错误
  63   2                      if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  64   2                      else                                                                    PS = 0; //低优先级中断
  65   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  66   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  67   2                      {
  68   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  69   3                              if(j >= 65536UL)        return 2;       //错误
  70   3                              j = 65536UL - j;
  71   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
  72   3                              {
  73   4                                      TR1 = 0;
  74   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  75   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  76   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  77   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  78   4                                      TH1 = (u8)(j>>8);
  79   4                                      TL1 = (u8)j;
  80   4                                      ET1 = 0;        //禁止中断
  81   4                                      TMOD &= ~0x40;  //定时
  82   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  83   4                                      TR1  = 1;
  84   4                              }
  85   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  86   3                              {
  87   4                                      AUXR &= ~(1<<4);        //Timer stop
  88   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  89   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
  90   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
  91   4                                      TH2 = (u8)(j>>8);
  92   4                                      TL2 = (u8)j;
  93   4                                      IE2  &= ~(1<<2);        //禁止中断
  94   4                                      AUXR &= ~(1<<3);        //定时
  95   4                                      AUXR |=  (1<<4);        //Timer run enable
  96   4                              }
  97   3                              else return 2;  //错误
  98   3                      }
  99   2                      else if(COMx->UART_Mode == UART_ShiftRight)
 100   2                      {
 101   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
 102   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
 103   3                      }
 104   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
 105   2                      {
 106   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
 107   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
 108   3                      }
 109   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
 110   2                      else                                                            ES = 0; //禁止中断
 111   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
 112   2                      else                                                            REN = 0;        //禁止接收
 113   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
 114   2                      if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 115   2                      else                                                                    PCON2 &= ~(1<<4);
 116   2                      return  0;
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 3   

 117   2              }
 118   1              return 3;       //其它错误
 119   1      }
 120          
 121          
 122          /*************** 装载串口发送缓冲 *******************************/
 123          
 124          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
 125          {
 126   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
 127   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
 128   1      
 129   1              if(COM1.B_TX_busy == 0)         //空闲
 130   1              {  
 131   2                      COM1.B_TX_busy = 1;             //标志忙
 132   2                      TI = 1;                                 //触发发送中断
 133   2              }
 134   1      }
 135          
 136          void PrintString1(u8 *puts)
 137          {
 138   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 139   1      }
 140          
 141          
 142          /********************* UART1中断函数************************/
 143          void UART1_int (void) interrupt UART1_VECTOR
 144          {
 145   1              if(RI)
 146   1              {
 147   2                      RI = 0;
 148   2                      if(COM1.B_RX_OK == 0)
 149   2                      {
 150   3                              if(COM1.RX_Cnt >= COM_RX1_Lenth)        COM1.RX_Cnt = 0;
 151   3                              RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 152   3                              COM1.RX_TimeOut = TimeOutSet1;
 153   3                      }
 154   2              }
 155   1      
 156   1              if(TI)
 157   1              {
 158   2                      TI = 0;
 159   2                      if(COM1.TX_read != COM1.TX_write)
 160   2                      {
 161   3                              SBUF = TX1_Buffer[COM1.TX_read];
 162   3                              if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 163   3                      }
 164   2                      else    COM1.B_TX_busy = 0;
 165   2              }
 166   1      }
 167          
 168          /*************  外部函数和变量声明 *****************/
 169          void Timer3Init(void)           //1??@24.000MHz
 170          {
 171   1              T4T3M |= 0x02;          //?????1T??
 172   1              T3L = 0x40;             //??????
 173   1              T3H = 0xA2;             //??????
 174   1              T4T3M |= 0x08;          //???3????
 175   1              IE2 |= B00100000;
 176   1      }
 177          
 178          u16 read_adc(u8 P_NUM)
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 4   

 179          {
 180   1      
 181   1              P1ASF = 1<<P_NUM;
 182   1              ADC_CONTR = B11100000 + P_NUM;
 183   1              CLK_DIV &=  B11011111;
 184   1              ADC_CONTR = B11101000+ P_NUM;
 185   1              delay_us(10);
 186   1              while(!(ADC_CONTR&0x10))
 187   1              {delay_us(10);}
 188   1              ADC_CONTR = B11100000+ P_NUM;
 189   1                                                      
 190   1              ADC_RESULT = ADC_RES;
 191   1              ADC_RESULT<<=2;
 192   1              ADC_RESULT+=ADC_RESL;
 193   1              ADC_RES = 0;
 194   1              ADC_RESL = 0;
 195   1              return ADC_RESULT;
 196   1      }
 197          
 198          void Timer3_Init (void) interrupt TIMER3_VECTOR
 199          {
 200   1              u16     i;
 201   1              EA = 0; 
 202   1              timer3_cnt++;
 203   1              if(timer3_cnt == 10)
 204   1              {
 205   2                      timer3_cnt = 0;
 206   2                      led_cnt++;
 207   2                      if(led_cnt==20){led_cnt=0;LED =! LED;}
 208   2                      
 209   2                      BUTTON_ADC_RESULT = read_adc(4);
 210   2                      
 211   2                      if(BUTTON_ADC_RESULT>>2<10){BUTTON1 = 0;}else{BUTTON1 = 1;}
 212   2                      if(BUTTON_ADC_RESULT>>2>100 && BUTTON_ADC_RESULT>>2<150){BUTTON2 = 0;}else{BUTTON2 = 1;}
 213   2                      if(BUTTON_ADC_RESULT>>2>160 && BUTTON_ADC_RESULT>>2<200){BUTTON3 = 0;}else{BUTTON3 = 1;}
 214   2                      
 215   2                      if(BUTTON1_DELAY == B11110000){BUTTON1_TRIG = 1;}else{BUTTON1_TRIG = 0;}
 216   2                      if(BUTTON2_DELAY == B11110000){BUTTON2_TRIG = 1;}else{BUTTON2_TRIG = 0;}
 217   2                      if(BUTTON3_DELAY == B11110000){BUTTON3_TRIG = 1;}else{BUTTON3_TRIG = 0;}
 218   2                      
 219   2                      BUTTON1_DELAY = (BUTTON1_DELAY<<1) + BUTTON1;
 220   2                      BUTTON2_DELAY = (BUTTON2_DELAY<<1) + BUTTON2;
 221   2                      BUTTON3_DELAY = (BUTTON3_DELAY<<1) + BUTTON3;
 222   2                      
 223   2                      OLED_ShowNum(0,6,BUTTON_ADC_RESULT,4,16);
 224   2                      
 225   2              }                       
 226   1              EA = 1; 
 227   1      }
*** WARNING C280 IN LINE 200 OF MAIN.C: 'i': unreferenced local variable
 228          
 229          sbit SCL =P2^6; 
 230          sbit SDA =P2^7; 
 231          
 232          void I2C_START()
 233          {
 234   1      SDA = 1;
 235   1      SCL = 1;
 236   1      delay_us(100);
 237   1      SDA = 0;
 238   1      delay_us(10);
 239   1      SCL = 0;
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 5   

 240   1      delay_us(10);
 241   1      }
 242          void I2C_STOP()
 243          {
 244   1      SDA = 0;
 245   1      SCL = 0;
 246   1      delay_us(10);
 247   1      SCL = 1;
 248   1      delay_us(10);
 249   1      SDA = 0;
 250   1      delay_us(10);
 251   1      
 252   1      }
 253          void I2C_BIT_SEND(bit value_bit)
 254          {
 255   1      SDA = value_bit;
 256   1      delay_us(10);
 257   1      SCL = 1;
 258   1      delay_us(10);
 259   1      SCL = 0;
 260   1      delay_us(10);
 261   1      }
 262          void I2C_ACKW()
 263          {
 264   1              I2C_BIT_SEND(1);
 265   1      }
 266          void I2C_ACKR()
 267          {
 268   1              I2C_BIT_SEND(0);
 269   1      }
 270          
 271          void I2C_WRITE_BYTE(u8 byte_in)
 272          {
 273   1      u8 i=0;
 274   1      u8 temp=0;
 275   1      temp = byte_in;
 276   1      for(i=0;i<8;i++)
 277   1      {
 278   2              if(temp&0x80){I2C_BIT_SEND(1);}else{I2C_BIT_SEND(0);}
 279   2              temp<<=1;
 280   2      }
 281   1      
 282   1      }
 283          
 284          
 285          /**********************************************/
 286          void main(void)
 287          {
 288   1              u16     i;
 289   1              u8 k = 0;
 290   1              u8 j = 0;
 291   1              u16 fre = 6;
 292   1              
 293   1              EA = 1;
 294   1              
 295   1              
 296   1              P1M1 = B00000000;
 297   1              P1M0 = B00100000;
 298   1              
 299   1              P2M1 = B10001010;
 300   1              P2M0 = B11111111;
 301   1              
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 6   

 302   1              P3M1 = B00001000;
 303   1              P3M0 = B11111100;
 304   1      
 305   1              P5M1 = B00010000;
 306   1              P5M0 = B00110000;
 307   1              
 308   1              OLED_Init();                    //初始化OLED  
 309   1              OLED_Clear(); 
 310   1              OLED_Clear();
 311   1                      
 312   1              OLED_DrawBMP(0,0,128,8,BIT_LOGO);
 313   1      
 314   1              delay_ms(2000);
 315   1              OLED_Clear();
 316   1      
 317   1              OLED_ShowCHinese(16,0,0);
 318   1              OLED_ShowCHinese(32,0,1);
 319   1              OLED_ShowCHinese(48,0,2);
 320   1              OLED_ShowCHinese(64,0,3);
 321   1              OLED_ShowCHinese(80,0,4);
 322   1              OLED_ShowCHinese(96,0,5);
 323   1              
 324   1              OLED_ShowCHinese(0,2,6);
 325   1              OLED_ShowCHinese(16,2,7);
 326   1              OLED_ShowCHinese(32,2,8);
 327   1              OLED_ShowCHinese(48,2,9);
 328   1              OLED_ShowCHinese(64,2,10);
 329   1              OLED_ShowCHinese(80,2,11);
 330   1              OLED_ShowCHinese(96,2,12);
 331   1              OLED_ShowCHinese(112,2,13);
 332   1      
 333   1      
 334   1      
 335   1      
 336   1              UART_config();
*** WARNING C206 IN LINE 336 OF MAIN.C: 'UART_config': missing function-prototype
 337   1              Timer3Init();           
 338   1              
 339   1              I2C_START();
 340   1              I2C_WRITE_BYTE(0x20);
 341   1              I2C_ACKW();
 342   1              I2C_WRITE_BYTE(0xD0);
 343   1              I2C_ACKW();
 344   1              I2C_WRITE_BYTE(0x01);
 345   1              I2C_ACKW();
 346   1      
 347   1              I2C_WRITE_BYTE((fre>>2)&0x00FF);
 348   1              I2C_ACKW();
 349   1              
 350   1              I2C_WRITE_BYTE(((fre&0x0003)<<6) | 0x10);
 351   1              I2C_ACKW();
 352   1      
 353   1              I2C_WRITE_BYTE(0x00);
 354   1              I2C_ACKW();
 355   1              I2C_WRITE_BYTE(0x40);
 356   1              I2C_ACKW();
 357   1      
 358   1              I2C_WRITE_BYTE(0x90);
 359   1              I2C_ACKW();
 360   1              I2C_WRITE_BYTE(0x80);
 361   1              I2C_ACKW();     
 362   1              
C51 COMPILER V9.00   MAIN                                                                  06/01/2016 15:51:20 PAGE 7   

 363   1              I2C_STOP();
 364   1      
 365   1              while (1)
 366   1              {
 367   2                      if(COM1.RX_TimeOut > 0)         //超时计数
 368   2                      {
 369   3                              if(--COM1.RX_TimeOut == 0)
 370   3                              {
 371   4                                      if(COM1.RX_Cnt > 0)
 372   4                                      {
 373   5                                               for(i=0;i<COM1.RX_Cnt;i++)
 374   5                                                {
 375   6                                                              TX1_write2buff(RX1_Buffer[i]);
 376   6                                                }                                       
 377   5                                      }
 378   4                                      COM1.RX_Cnt = 0;
 379   4                              }
 380   3                      }
 381   2                      delay_ms(1000);
 382   2                      k++;
 383   2                      TX1_write2buff(k);
 384   2      
 385   2                                              
 386   2              }
 387   1      }
*** WARNING C316 IN LINE 387 OF main.c: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1698    ----
   CONSTANT SIZE    =   1024    ----
   XDATA SIZE       =     43      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     20    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
